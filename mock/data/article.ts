interface Result {
  code: number
  data: object | []
  message: string
}

export const getArticleList = function (): Result {
  return {
    code: 200,
    data: [
      {
        userName: "zhangbingqing",
        title: "搭建 Vite2+Vue3+TS项目并配置JS、CSS、GIT提交规范",
        intro:
          "搭建vite-vue3 项目，使用ESLint + Prettier+Stylelint编码规范，并加入代码提交规范全家桶之husky +lint-staged + commitlint",
        publish: "2021-09-12 10:09:21",
      },
      {
        userName: "zhangbingqing",
        title: "前端 JS 代码规范(Eslint + Prettier)",
        intro:
          "搭建vite-vue3 项目，使用ESLint + Prettier+Stylelint编码规范，并加入代码提交规范全家桶之husky +lint-staged + commitlint",
        publish: "2021-09-12 10:09:21",
      },
    ],
    message: "请求成功",
  }
}

export const getArticleDetail = function (): Result {
  const con2 = JSON.stringify(
    '<h2 data-v-md-heading="一、项目生成" data-v-md-line="1">一、项目生成</h2>\n<ol data-v-md-line="3">\n<li>脚手架项目</li>\n</ol>\n<p data-v-md-line="5">使用脚手架，生成一个 vite-vue3 项目</p>\n<div data-v-md-line="7"><div class="v-md-pre-wrapper v-md-pre-wrapper- extra-class"><pre class="v-md-prism-"><code>npm init vite@latest my-vite-vue3\n</code></pre>\n</div></div><p data-v-md-line="11">新生成目录如下：</p>\n<p data-v-md-line="13"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d81550c7ce3643ac9c0810d785444138~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p>\n<ol start="2" data-v-md-line="15">\n<li>安装依赖并启动项目</li>\n</ol>\n<div data-v-md-line="17"><div class="v-md-pre-wrapper v-md-pre-wrapper- extra-class"><pre class="v-md-prism-"><code>cd my-vite-vue3\nnpm i\nnpm run dev\n</code></pre>\n</div></div><ol start="3" data-v-md-line="23">\n<li>测试一下</li>\n</ol>\n<p data-v-md-line="25">在浏览器中成功打开，项目成功启动</p>\n<p data-v-md-line="27"><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3db3956717e24d7aa0fcb5fc05ac254c~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p>\n<h2 data-v-md-heading="二、配置-eslint-prettier" data-v-md-line="29">二、配置 ESLint + Prettier</h2>\n<h3 data-v-md-heading="_1-安装-eslint" data-v-md-line="31">1. 安装 ESLint</h3>\n<div data-v-md-line="33"><div class="v-md-pre-wrapper v-md-pre-wrapper- extra-class"><pre class="v-md-prism-"><code>npm i eslint -D\n</code></pre>\n</div></div><h3 data-v-md-heading="_2-初始化-eslint" data-v-md-line="37">2. 初始化 ESLint</h3>\n<div data-v-md-line="39"><div class="v-md-pre-wrapper v-md-pre-wrapper- extra-class"><pre class="v-md-prism-"><code>eslint --init\n</code></pre>\n</div></div><p data-v-md-line="43"><strong>PS：</strong> 在终端执行如上命令的前提是要全局安装 ESLint，如果没有全局安装，可以在 package.json 文件中添加如下执行语句：</p>\n<div data-v-md-line="45"><div class="v-md-pre-wrapper v-md-pre-wrapper- extra-class"><pre class="v-md-prism-"><code>// pagckage.json\n{\n    &quot;scripts&quot;: {\n        &quot;init&quot;: &quot;eslint --init&quot;\n    }\n}\n</code></pre>\n</div></div><p data-v-md-line="54">接着会有一连串的问答选项</p>\n<div data-v-md-line="56"><div class="v-md-pre-wrapper v-md-pre-wrapper- extra-class"><pre class="v-md-prism-"><code># 选择 帮我们找到不规范的语法，并强制执行\n? How would you like to use ESLint? …\n  To check syntax only\n  To check syntax and find problems\n❯ To check syntax, find problems, and enforce code style\n\n# 选择 ES6代码规范\n? What type of modules does your project use? …\n❯ JavaScript modules (import/export)\n  CommonJS (require/exports)\n  None of these\n\n# 选择 项目中使用的框架，我这里选择Vue.js\n? Which framework does your project use? …\n  React\n❯ Vue.js\n  None of these\n\n# 选择 是否使用typescript 我这里选择是\nDoes your project use TypeScript? › No / Yes\n\n# 选择 eslint运行的环境 浏览器 + Node\n? Where does your code run? …  (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection)\n✔ Browser\n✔ Node\n\n# 选择 一个流行的代码规范\n? How would you like to define a style for your project? …\n❯ Use a popular style guide\n  Answer questions about your style\n  Inspect your JavaScript file(s)\n\n# 选择 开源的配置方案选择 standard\n? Which style guide do you want to follow? …\n  Airbnb: https://github.com/airbnb/javascript\n❯ Standard: https://github.com/standard/standard\n  Google: https://github.com/google/eslint-config-google\n  XO: https://github.com/xojs/eslint-config-xo\n\n# 选择 ESLint配置文件格式 JavaScript\n? What format do you want your config file to be in? …\n❯ JavaScript\n  YAML\n  JSON\n\n# 是否同意安装\n✔ Would you like to install them now with npm? · No / Yes\n\n...\nSuccessfully created .eslintrc.js file\n</code></pre>\n</div></div><p data-v-md-line="109">执行脚本验证</p>\n<div data-v-md-line="111"><div class="v-md-pre-wrapper v-md-pre-wrapper- extra-class"><pre class="v-md-prism-"><code>npm run lint\n</code></pre>\n</div></div><p data-v-md-line="115">此时控制台会报如下的错误</p>\n<p data-v-md-line="117"><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e10b014eba69405ea430743c0afe4371~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p>\n<p data-v-md-line="119">说明 eslint 生效了，那如何解决以上来个那个问题呢？</p>\n<p data-v-md-line="121">问题 1： ‘defineProps’ is not defined</p>\n<p data-v-md-line="123">解决方案： 只需要在 import 中添加 defineProps 即可</p>\n<div data-v-md-line="125"><div class="v-md-pre-wrapper v-md-pre-wrapper- extra-class"><pre class="v-md-prism-"><code>import { ref, defineProps } from \'vue\'\n\ndefineProps&lt;{ msg: string }&gt;()\n</code></pre>\n</div></div><p data-v-md-line="131">问题 2： The template root requires exactly one element vue/no-multiple-template-root–template–不允许有多个根结点。这是 Vue2 的校验规范</p>\n<p data-v-md-line="133">解决方案：我们需要在.eslintrc.js 的 vue 扩展改成 Vue3 的校验规范</p>\n<div data-v-md-line="135"><div class="v-md-pre-wrapper v-md-pre-wrapper- extra-class"><pre class="v-md-prism-"><code>  extends: [\n    \'plugin:vue/vue3-essential\',\n  ]\n</code></pre>\n</div></div><h3 data-v-md-heading="_3-创建-eslintignore、-prettierrc-js、-prettierignore-文件" data-v-md-line="141">3. 创建.eslintignore、.prettierrc.js、.prettierignore 文件</h3>\n<ul data-v-md-line="143">\n<li>创建.eslintignore 文件，在文件中配置目录和文件，可跳过 ESLint 检查</li>\n<li>创建.prettierrc.js 文件，我们可以对 prettier 的默认配置进行修改</li>\n<li>创建.prettierignore 文件，在文件中配置目录和文件，可跳过 Prettier 格式化</li>\n</ul>\n<div data-v-md-line="147"><div class="v-md-pre-wrapper v-md-pre-wrapper- extra-class"><pre class="v-md-prism-"><code>// .eslintignore\n/public/\n/dist/\n/node_modules/\npackage.json\n.eslintrc.js\n\n// .prettierrc.js\nmodule.exports = {\n  semi: false, // 行尾不使用分号\n  singleQuote: true, // 尽量使用单引号\n  trailingComma: \'all\', // 对象末尾使用逗号\n}\n\n// .prettierignore\n/public/\n/dist/\n/node_modules/\npackage.json\n</code></pre>\n</div></div><h3 data-v-md-heading="_4、格式化-vue-文件" data-v-md-line="169">4、格式化 Vue 文件</h3>\n<p data-v-md-line="171">此时打开 components/HelloWorld.vue, 修改 template 中的 div，文件中的 tempalate 部分的代码格式化不生效。说明此时 ESLint 还缺乏对 vue 文件格式化的能力(ESLint 默认只有格式化 JS 文件的能力)，因此需要安装如下的 npm 包：</p>\n<div data-v-md-line="173"><div class="v-md-pre-wrapper v-md-pre-wrapper- extra-class"><pre class="v-md-prism-"><code>npm i prettier -D\nnpm i eslint-plugin-prettier -D\nnpm i @vue/eslint-config-prettier -D\nnpm i @vue/eslint-config-typescript -D\n</code></pre>\n</div></div><p data-v-md-line="180">在.eslintrc.js 的 extends(扩展) 中引入如上配置规则库：</p>\n<div data-v-md-line="182"><div class="v-md-pre-wrapper v-md-pre-wrapper- extra-class"><pre class="v-md-prism-"><code> extends: [\n    \'plugin:vue/vue3-essential\',\n    \'standard\',\n    \'@vue/typescript/recommended\',\n    \'@vue/prettier\',\n    \'@vue/prettier/@typescript-eslint\',\n  ]\n</code></pre>\n</div></div><p data-v-md-line="192"><strong>PS:</strong> 修改后记得重启 VSCode，不然有可能不生效</p>\n<h2 data-v-md-heading="三、配置-stylelint" data-v-md-line="194">三、配置 Stylelint</h2>\n<ul data-v-md-line="196">\n<li>了解最新的 CSS 语法</li>\n<li>从 HTML，markdown 和 CSS-in-JS 对象和模板文字中提取嵌入式样式</li>\n<li>解析类似于 CSS 的语法，例如 SCSS，Sass，Less 和 SugarSS</li>\n<li>拥有 170 多个内置规则，可捕获错误，应用限制并强制执行样式规则</li>\n<li>支持插件，因此您可以创建自己的规则或使用社区编写的插件</li>\n<li>自动修复大多数样式违规</li>\n<li>支持可扩展或创建的可共享配置</li>\n</ul>\n<h3 data-v-md-heading="_1-安装-stylelint" data-v-md-line="204">1. 安装 Stylelint</h3>\n<div data-v-md-line="206"><div class="v-md-pre-wrapper v-md-pre-wrapper- extra-class"><pre class="v-md-prism-"><code>npm i stylelint -D\nnpm i stylelint-config-standard -D     // 配置 Stylelint 规则\nnpm i stylelint-config-prettier -D     // 关闭所有不必要或可能与Prettier冲突的规则\nnpm i stylelint-order -D               // 控制css顺序的规则插件，我们可以在rules中通过order/properties-order传入一个css属性数组\nnpm i stylelint-config-recess-order -D // css顺序的配置，一份写好的配置好的属性列表，格式化时，会按这个顺序来排序\n</code></pre>\n</div></div><h3 data-v-md-heading="_2-新建-stylelintrc-js-文件" data-v-md-line="214">2. 新建.stylelintrc.js 文件</h3>\n<p data-v-md-line="216">可以对 stylelint 的默认配置进行修改</p>\n<div data-v-md-line="218"><div class="v-md-pre-wrapper v-md-pre-wrapper- extra-class"><pre class="v-md-prism-"><code>module.exports = {\n  root: true,\n  plugins: [&quot;stylelint-order&quot;],\n  extends: [&quot;stylelint-config-standard&quot;, &quot;stylelint-config-prettier&quot;, &quot;stylelint-config-recess-order&quot;],\n  rules: {\n  },\n}\n</code></pre>\n</div></div><h3 data-v-md-heading="_3-新建-stylelintignore-文件" data-v-md-line="228">3. 新建.stylelintignore 文件</h3>\n<p data-v-md-line="230">在文件中配置的文件或目录可以绕过 stylelint 格式化</p>\n<div data-v-md-line="232"><div class="v-md-pre-wrapper v-md-pre-wrapper- extra-class"><pre class="v-md-prism-"><code>/dist/*\n/public/*\npublic/*\n*.js\n*.ts\n*.png\n*.jpg\n*.webp\n*.ttf\n*.woff\n</code></pre>\n</div></div><h2 data-v-md-heading="四、配置-husky-lint-staged-commitlint" data-v-md-line="245">四、配置 husky + lint-staged + commitlint</h2>\n<h3 data-v-md-heading="_1-配置-husky" data-v-md-line="247">1. 配置 husky</h3>\n<p data-v-md-line="249">husky 是一种 git hook 工具，使用 husky 可以挂载 git 钩子，当我们进行 commit、push 等操作前，可以进行 eslint、stylelint 检查，如果检查没通过，则不允许 commit 或 push 操作。以及在进行 commit msg 时，验证 msg 信息是否符合规范。</p>\n<p data-v-md-line="251">husky 有如下缺陷：</p>\n<ul data-v-md-line="253">\n<li>husky 会将项目的所有文件都 lint 一遍，哪怕我们只是修改了部分文件，效率低下</li>\n<li>husky 的钩子只能执行一个命令，有时候我们希望在 commit 之前执行多个指令，如 ESLint、Stylelint、Commitlint 等操作。<br>\n因此，husky 一般都是配合 lint-staged 一起使用，很少会单独使用。</li>\n</ul>\n<p data-v-md-line="257"><strong>1）安装 husky</strong></p>\n<div data-v-md-line="259"><div class="v-md-pre-wrapper v-md-pre-wrapper- extra-class"><pre class="v-md-prism-"><code>npm i husky -D\n</code></pre>\n</div></div><p data-v-md-line="263"><strong>2）在 package.json 中添加 prepare 脚本</strong></p>\n<div data-v-md-line="265"><div class="v-md-pre-wrapper v-md-pre-wrapper- extra-class"><pre class="v-md-prism-"><code>{\n  &quot;script&quot;: {\n    &quot;prepare&quot;: &quot;husky install&quot;\n  }\n}\n</code></pre>\n</div></div><p data-v-md-line="273"><strong>3）执行 prepare 脚本</strong></p>\n<div data-v-md-line="275"><div class="v-md-pre-wrapper v-md-pre-wrapper- extra-class"><pre class="v-md-prism-"><code>npm run prepare\n</code></pre>\n</div></div><p data-v-md-line="279">会在项目的根目录下生成一个.husky 目录用于存放 git hooks</p>\n<p data-v-md-line="281"><strong>4）添加 pre-commit 钩子</strong></p>\n<p data-v-md-line="283">在 commit 前进行 eslint、stylelint 等检查</p>\n<div data-v-md-line="285"><div class="v-md-pre-wrapper v-md-pre-wrapper- extra-class"><pre class="v-md-prism-"><code>npx husky add .husky/pre-commit &quot;npm run lint&quot;\n</code></pre>\n</div></div><p data-v-md-line="289">执行如上命令，会在.husky 目录下新增一个 pre-commit 的 shell 脚本，该脚本的作用主要是为了执行<code>npm run lint</code>，脚本内容如下：</p>\n<div data-v-md-line="291"><div class="v-md-pre-wrapper v-md-pre-wrapper- extra-class"><pre class="v-md-prism-"><code>#!/bin/sh\n. &quot;$(dirname &quot;$0&quot;)/_/husky.sh&quot;\n\nnpm run lint\n</code></pre>\n</div></div><p data-v-md-line="298"><strong>测试一下</strong></p>\n<p data-v-md-line="300">在 main.ts 后加入<code>console.log</code>保存后，执行如下命令</p>\n<div data-v-md-line="302"><div class="v-md-pre-wrapper v-md-pre-wrapper- extra-class"><pre class="v-md-prism-"><code>git commmit -m \'test\'\n</code></pre>\n</div></div><p data-v-md-line="306">终端显示<code>ESLint</code>报错信息，并阻止 commit 操作，说明配置成功</p>\n<p data-v-md-line="308"><strong>5）添加 commit-msg 钩子</strong></p>\n<p data-v-md-line="310">在<code>commit msg</code>时，对 msg 的内容进行规范验证，不符合规范，则不允许 commit 操作</p>\n<div data-v-md-line="312"><div class="v-md-pre-wrapper v-md-pre-wrapper- extra-class"><pre class="v-md-prism-"><code>npx husky add .husky/commit-msg \'npx --no-install commitlint --edit &quot;$1&quot;\'\n</code></pre>\n</div></div><p data-v-md-line="316">会在.husky 目录下生成 commit-msg 的 shell 脚本，脚本内容如下：</p>\n<div data-v-md-line="318"><div class="v-md-pre-wrapper v-md-pre-wrapper- extra-class"><pre class="v-md-prism-"><code>#!/bin/sh\n\n&quot;$(dirname &quot;$0&quot;)/_/husky.sh&quot;\n\nnpx --no-install commitlint --edit &quot;$1&quot;\n</code></pre>\n</div></div><p data-v-md-line="326">需要配合下文的 commitlint 一起使用，再进行测试</p>\n<h3 data-v-md-heading="_2-配置-lint-staged" data-v-md-line="328">2. 配置 lint-staged</h3>\n<p data-v-md-line="330"><strong>1）安装 lint-staged</strong></p>\n<p data-v-md-line="332">lint-staged 只对暂存区（通过<code>git add</code>后的）的文件进行 lint（检查），同时它允许指定不同后缀文件执行不同指令的操作，并且可以按步骤再额外的执行一些其他的 shell 指令</p>\n<div data-v-md-line="334"><div class="v-md-pre-wrapper v-md-pre-wrapper- extra-class"><pre class="v-md-prism-"><code>npm i lint-staged --save-dev\n</code></pre>\n</div></div><p data-v-md-line="338"><strong>2）在 package.json 中添加相关配置</strong></p>\n<div data-v-md-line="340"><div class="v-md-pre-wrapper v-md-pre-wrapper- extra-class"><pre class="v-md-prism-"><code>&quot;lint-staged&quot;: {\n    &quot;*.vue&quot;: [\n      &quot;eslint --fix&quot;,\n      &quot;stylelint --fix&quot;\n    ],\n    &quot;*.{js,jsx,ts,tsx}&quot;: &quot;eslint --fix&quot;,\n    &quot;*.{htm,html,css,sss,less,scss,sass}&quot;: &quot;stylelint --fix&quot;\n  },&quot;lint-staged&quot;: {\n    &quot;*.vue&quot;: [\n      &quot;eslint --fix&quot;,\n      &quot;stylelint --fix&quot;\n    ],\n    &quot;*.{js,jsx,ts,tsx}&quot;: &quot;eslint --fix&quot;,\n    &quot;*.{htm,html,css,sss,less,scss,sass}&quot;: &quot;stylelint --fix&quot;\n  },\n</code></pre>\n</div></div><p data-v-md-line="358">修改 pre-commit 文件</p>\n<div data-v-md-line="360"><div class="v-md-pre-wrapper v-md-pre-wrapper- extra-class"><pre class="v-md-prism-"><code>#!/bin/sh\n. &quot;$(dirname &quot;$0&quot;)/_/husky.sh&quot;\n\nnpx lint-staged --allow-empty $1\n</code></pre>\n</div></div><p data-v-md-line="367"><strong>测试一下</strong></p>\n<p data-v-md-line="369">同上执行<code>git commmit -m \'test\'</code>，终端显示<code>ESLint</code>报错信息，则配置成功</p>\n<h3 data-v-md-heading="_3-配置-commitlint" data-v-md-line="371">3. 配置 commitlint</h3>\n<p data-v-md-line="373">主要是为了验证<code>commit msg</code>的 msg 是否符合规范</p>\n<p data-v-md-line="375"><strong>1）安装 commitlint 相关依赖包</strong></p>\n<div data-v-md-line="377"><div class="v-md-pre-wrapper v-md-pre-wrapper- extra-class"><pre class="v-md-prism-"><code>npm install @commitlint/cli @commitlint/config-conventional --save-dev\n</code></pre>\n</div></div><p data-v-md-line="381"><strong>2）新建并配置 comminlint.config.js 文件</strong></p>\n<div data-v-md-line="383"><div class="v-md-pre-wrapper v-md-pre-wrapper- extra-class"><pre class="v-md-prism-"><code>module.exports = {\n  extends: [\'@commitlint/config-conventional\'], // 直接引入配置好的一个库，免得自己要一个一个定义\n}\n</code></pre>\n</div></div><p data-v-md-line="389"><strong>3）按如下步骤测试一下</strong></p>\n<ol data-v-md-line="391">\n<li>去掉 mian.ts 文件中的<code>console.log</code></li>\n<li>执行<code>git commmit -m \'test\'</code>，终端显示 msg 提交信息不规范，commit 操作中止，说明 comminlint 生效了</li>\n<li>按 msg 规范再提交一次，执行<code>git commmit -m \'fix: 修复 main.ts 文件\'</code>，commit 提交成功</li>\n</ol>\n<h2 data-v-md-heading="五、vscode-中集成-eslint-prettier-stylelint" data-v-md-line="395">五、VSCode 中集成 ESLint + Prettier + Stylelint</h2>\n<h3 data-v-md-heading="_1-安装如下插件" data-v-md-line="397">1. 安装如下插件：</h3>\n<ul data-v-md-line="399">\n<li>Vue Language Features (Volar) Vue3.0 语法支持</li>\n<li>TypeScript Vue Plugin (Volar) 用于 TypeScript 服务器的 Vue 插件</li>\n<li>Iconify IntelliSense Iconify 预览和搜索</li>\n<li>ESLint 脚本代码检查</li>\n<li>Prettier 代码格式化</li>\n<li>Stylelint css 格式化</li>\n<li>DotENV .env 文件高亮</li>\n<li>EditorConfig for VS Code，这个插件可以让编译器读取配置文件，这个插件可以让编译器读取配置文件</li>\n</ul>\n<p data-v-md-line="408"><strong>PS:</strong> 我们需要禁用掉 Vetur 插件，不然会导致 Volar 插件不生效</p>\n<h3 data-v-md-heading="_2-配置-setting-json" data-v-md-line="410">2. 配置 setting.json</h3>\n<ol data-v-md-line="412">\n<li>配置工作区 setttings.json 文件</li>\n</ol>\n<div data-v-md-line="414"><div class="v-md-pre-wrapper v-md-pre-wrapper- extra-class"><pre class="v-md-prism-"><code>{\n  // #每次保存的时候自动格式化\n  &quot;editor.formatOnSave&quot;: false,\n  &quot;editor.codeActionsOnSave&quot;: {\n    &quot;source.fixAll.eslint&quot;: true,\n    &quot;source.fixAll.stylelint&quot;: true\n  }\n}\n</code></pre>\n</div></div><ol start="2" data-v-md-line="425">\n<li>用户区 settings.json，在项目根目录创建.vscode/settings.json 文件。</li>\n</ol>\n<div data-v-md-line="427"><div class="v-md-pre-wrapper v-md-pre-wrapper- extra-class"><pre class="v-md-prism-"><code>{\n  &quot;editor.formatOnSave&quot;: false,\n  &quot;editor.codeActionsOnSave&quot;: {\n    &quot;source.fixAll.eslint&quot;: true,\n    &quot;source.fixAll.stylelint&quot;: true\n  },\n}\n</code></pre>\n</div></div><h3 data-v-md-heading="_3-配置-editorconfig-文件" data-v-md-line="437">3. 配置 EditorConfig 文件</h3>\n<p data-v-md-line="439">在项目根目录创建.editorconfig 文件。创建完成之后，这个文件里面定义的代码规范规则会高于编译器默认的代码规范规则。</p>\n<div data-v-md-line="441"><div class="v-md-pre-wrapper v-md-pre-wrapper- extra-class"><pre class="v-md-prism-"><code> root = true\n [*]\n charset = utf-8\n indent_style = space\n indent_size = 2\n insert_final_newline = true\n trim_trailing_whitespace = true\n end_of_line = auto\n</code></pre>\n</div></div><h2 data-v-md-heading="六、踩坑记" data-v-md-line="452">六、踩坑记</h2>\n<ol data-v-md-line="454">\n<li>执行<code>npm run lint</code> 时，控制台报 <code>Unknown word (CssSyntaxError)</code> 错误<br>\n因为最新的 stylelint stylelint-config-standard 对 vue3 模版文件支持不是很好，不能正确识别出.vue 文件的 css 代码。所以需要对以下三个文件做降级处理<div data-v-md-line="456"><div class="v-md-pre-wrapper v-md-pre-wrapper- extra-class"><pre class="v-md-prism-"><code>&quot;stylelint&quot;: &quot;^13.13.1&quot;,\n&quot;stylelint-config-standard&quot;: &quot;^22.0.0&quot;,\n&quot;stylelint-scss&quot;: &quot;^3.21.0&quot;,\n</code></pre>\n</div></div></li>\n<li>VSCode 中 stylelint 格式化不生效的问题<br>\n同样也是要对 stylelint 做降级处理，选择 0.87.6 版本安装即可，具体操作如下</li>\n</ol>\n<h2 data-v-md-heading="七、参考" data-v-md-line="464">七、参考</h2>\n<ul data-v-md-line="466">\n<li>https://blog.csdn.net/weixin_45137565/article/details/120403170</li>\n<li>https://juejin.cn/post/7022720509875847182</li>\n<li>https://www.cnblogs.com/Yellow-ice/p/15127392.html</li>\n<li>https://www.cnblogs.com/Yellow-ice/p/15349873.html</li>\n<li>https://www.cnblogs.com/Yellow-ice/p/15349873.html</li>\n<li>https://segmentfault.com/a/1190000040615432?utm_source=sf-similar-article</li>\n<li>https://www.npmjs.com/package/husky</li>\n<li>https://typicode.github.io/husky/#/</li>\n<li>https://www.npmjs.com/package/lint-staged</li>\n</ul>\n',
  )

  const con = JSON.stringify(
    '## 一、项目生成\n\n1. 脚手架项目\n\n使用脚手架，生成一个 vite-vue3 项目\n\n```\nnpm init vite@latest my-vite-vue3\n```\n\n新生成目录如下：\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d81550c7ce3643ac9c0810d785444138~tplv-k3u1fbpfcp-watermark.image?)\n\n2. 安装依赖并启动项目\n\n```\ncd my-vite-vue3\nnpm i\nnpm run dev\n```\n\n3. 测试一下\n\n在浏览器中成功打开，项目成功启动\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3db3956717e24d7aa0fcb5fc05ac254c~tplv-k3u1fbpfcp-watermark.image?)\n\n## 二、配置 ESLint + Prettier\n\n### 1. 安装 ESLint\n\n```\nnpm i eslint -D\n```\n\n### 2. 初始化 ESLint\n\n```\neslint --init\n```\n\n**PS：** 在终端执行如上命令的前提是要全局安装 ESLint，如果没有全局安装，可以在 package.json 文件中添加如下执行语句：\n\n```\n// pagckage.json\n{\n    "scripts": {\n        "init": "eslint --init"\n    }\n}\n```\n\n接着会有一连串的问答选项\n\n```\n# 选择 帮我们找到不规范的语法，并强制执行\n? How would you like to use ESLint? …\n  To check syntax only\n  To check syntax and find problems\n❯ To check syntax, find problems, and enforce code style\n\n# 选择 ES6代码规范\n? What type of modules does your project use? …\n❯ JavaScript modules (import/export)\n  CommonJS (require/exports)\n  None of these\n\n# 选择 项目中使用的框架，我这里选择Vue.js\n? Which framework does your project use? …\n  React\n❯ Vue.js\n  None of these\n\n# 选择 是否使用typescript 我这里选择是\nDoes your project use TypeScript? › No / Yes\n\n# 选择 eslint运行的环境 浏览器 + Node\n? Where does your code run? …  (Press <space> to select, <a> to toggle all, <i> to invert selection)\n✔ Browser\n✔ Node\n\n# 选择 一个流行的代码规范\n? How would you like to define a style for your project? …\n❯ Use a popular style guide\n  Answer questions about your style\n  Inspect your JavaScript file(s)\n\n# 选择 开源的配置方案选择 standard\n? Which style guide do you want to follow? …\n  Airbnb: https://github.com/airbnb/javascript\n❯ Standard: https://github.com/standard/standard\n  Google: https://github.com/google/eslint-config-google\n  XO: https://github.com/xojs/eslint-config-xo\n\n# 选择 ESLint配置文件格式 JavaScript\n? What format do you want your config file to be in? …\n❯ JavaScript\n  YAML\n  JSON\n\n# 是否同意安装\n✔ Would you like to install them now with npm? · No / Yes\n\n...\nSuccessfully created .eslintrc.js file\n```\n\n执行脚本验证\n\n```\nnpm run lint\n```\n\n此时控制台会报如下的错误\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e10b014eba69405ea430743c0afe4371~tplv-k3u1fbpfcp-watermark.image?)\n\n说明 eslint 生效了，那如何解决以上来个那个问题呢？\n\n问题 1： \'defineProps\' is not defined\n\n解决方案： 只需要在 import 中添加 defineProps 即可\n\n```\nimport { ref, defineProps } from \'vue\'\n\ndefineProps<{ msg: string }>()\n```\n\n问题 2： The template root requires exactly one element vue/no-multiple-template-root--template--不允许有多个根结点。这是 Vue2 的校验规范\n\n解决方案：我们需要在.eslintrc.js 的 vue 扩展改成 Vue3 的校验规范\n\n```\n  extends: [\n    \'plugin:vue/vue3-essential\',\n  ]\n```\n\n### 3. 创建.eslintignore、.prettierrc.js、.prettierignore 文件\n\n- 创建.eslintignore 文件，在文件中配置目录和文件，可跳过 ESLint 检查\n- 创建.prettierrc.js 文件，我们可以对 prettier 的默认配置进行修改\n- 创建.prettierignore 文件，在文件中配置目录和文件，可跳过 Prettier 格式化\n\n```\n// .eslintignore\n/public/\n/dist/\n/node_modules/\npackage.json\n.eslintrc.js\n\n// .prettierrc.js\nmodule.exports = {\n  semi: false, // 行尾不使用分号\n  singleQuote: true, // 尽量使用单引号\n  trailingComma: \'all\', // 对象末尾使用逗号\n}\n\n// .prettierignore\n/public/\n/dist/\n/node_modules/\npackage.json\n```\n\n### 4、格式化 Vue 文件\n\n此时打开 components/HelloWorld.vue, 修改 template 中的 div，文件中的 tempalate 部分的代码格式化不生效。说明此时 ESLint 还缺乏对 vue 文件格式化的能力(ESLint 默认只有格式化 JS 文件的能力)，因此需要安装如下的 npm 包：\n\n```\nnpm i prettier -D\nnpm i eslint-plugin-prettier -D\nnpm i @vue/eslint-config-prettier -D\nnpm i @vue/eslint-config-typescript -D\n```\n\n在.eslintrc.js 的 extends(扩展) 中引入如上配置规则库：\n\n```\n extends: [\n    \'plugin:vue/vue3-essential\',\n    \'standard\',\n    \'@vue/typescript/recommended\',\n    \'@vue/prettier\',\n    \'@vue/prettier/@typescript-eslint\',\n  ]\n```\n\n**PS:** 修改后记得重启 VSCode，不然有可能不生效\n\n## 三、配置 Stylelint\n\n- 了解最新的 CSS 语法\n- 从 HTML，markdown 和 CSS-in-JS 对象和模板文字中提取嵌入式样式\n- 解析类似于 CSS 的语法，例如 SCSS，Sass，Less 和 SugarSS\n- 拥有 170 多个内置规则，可捕获错误，应用限制并强制执行样式规则\n- 支持插件，因此您可以创建自己的规则或使用社区编写的插件\n- 自动修复大多数样式违规\n- 支持可扩展或创建的可共享配置\n\n### 1. 安装 Stylelint\n\n```\nnpm i stylelint -D\nnpm i stylelint-config-standard -D     // 配置 Stylelint 规则\nnpm i stylelint-config-prettier -D     // 关闭所有不必要或可能与Prettier冲突的规则\nnpm i stylelint-order -D               // 控制css顺序的规则插件，我们可以在rules中通过order/properties-order传入一个css属性数组\nnpm i stylelint-config-recess-order -D // css顺序的配置，一份写好的配置好的属性列表，格式化时，会按这个顺序来排序\n```\n\n### 2. 新建.stylelintrc.js 文件\n\n可以对 stylelint 的默认配置进行修改\n\n```\nmodule.exports = {\n  root: true,\n  plugins: ["stylelint-order"],\n  extends: ["stylelint-config-standard", "stylelint-config-prettier", "stylelint-config-recess-order"],\n  rules: {\n  },\n}\n```\n\n### 3. 新建.stylelintignore 文件\n\n在文件中配置的文件或目录可以绕过 stylelint 格式化\n\n```\n/dist/*\n/public/*\npublic/*\n*.js\n*.ts\n*.png\n*.jpg\n*.webp\n*.ttf\n*.woff\n```\n\n## 四、配置 husky + lint-staged + commitlint\n\n### 1. 配置 husky\n\nhusky 是一种 git hook 工具，使用 husky 可以挂载 git 钩子，当我们进行 commit、push 等操作前，可以进行 eslint、stylelint 检查，如果检查没通过，则不允许 commit 或 push 操作。以及在进行 commit msg 时，验证 msg 信息是否符合规范。\n\nhusky 有如下缺陷：\n\n- husky 会将项目的所有文件都 lint 一遍，哪怕我们只是修改了部分文件，效率低下\n- husky 的钩子只能执行一个命令，有时候我们希望在 commit 之前执行多个指令，如 ESLint、Stylelint、Commitlint 等操作。\n  因此，husky 一般都是配合 lint-staged 一起使用，很少会单独使用。\n\n**1）安装 husky**\n\n```\nnpm i husky -D\n```\n\n**2）在 package.json 中添加 prepare 脚本**\n\n```\n{\n  "script": {\n    "prepare": "husky install"\n  }\n}\n```\n\n**3）执行 prepare 脚本**\n\n```\nnpm run prepare\n```\n\n会在项目的根目录下生成一个.husky 目录用于存放 git hooks\n\n**4）添加 pre-commit 钩子**\n\n在 commit 前进行 eslint、stylelint 等检查\n\n```\nnpx husky add .husky/pre-commit "npm run lint"\n```\n\n执行如上命令，会在.husky 目录下新增一个 pre-commit 的 shell 脚本，该脚本的作用主要是为了执行`npm run lint`，脚本内容如下：\n\n```\n#!/bin/sh\n. "$(dirname "$0")/_/husky.sh"\n\nnpm run lint\n```\n\n**测试一下**\n\n在 main.ts 后加入`console.log`保存后，执行如下命令\n\n```\ngit commmit -m \'test\'\n```\n\n终端显示`ESLint`报错信息，并阻止 commit 操作，说明配置成功\n\n**5）添加 commit-msg 钩子**\n\n在`commit msg`时，对 msg 的内容进行规范验证，不符合规范，则不允许 commit 操作\n\n```\nnpx husky add .husky/commit-msg \'npx --no-install commitlint --edit "$1"\'\n```\n\n会在.husky 目录下生成 commit-msg 的 shell 脚本，脚本内容如下：\n\n```\n#!/bin/sh\n\n"$(dirname "$0")/_/husky.sh"\n\nnpx --no-install commitlint --edit "$1"\n```\n\n需要配合下文的 commitlint 一起使用，再进行测试\n\n### 2. 配置 lint-staged\n\n**1）安装 lint-staged**\n\nlint-staged 只对暂存区（通过`git add`后的）的文件进行 lint（检查），同时它允许指定不同后缀文件执行不同指令的操作，并且可以按步骤再额外的执行一些其他的 shell 指令\n\n```\nnpm i lint-staged --save-dev\n```\n\n**2）在 package.json 中添加相关配置**\n\n```\n"lint-staged": {\n    "*.vue": [\n      "eslint --fix",\n      "stylelint --fix"\n    ],\n    "*.{js,jsx,ts,tsx}": "eslint --fix",\n    "*.{htm,html,css,sss,less,scss,sass}": "stylelint --fix"\n  },"lint-staged": {\n    "*.vue": [\n      "eslint --fix",\n      "stylelint --fix"\n    ],\n    "*.{js,jsx,ts,tsx}": "eslint --fix",\n    "*.{htm,html,css,sss,less,scss,sass}": "stylelint --fix"\n  },\n```\n\n修改 pre-commit 文件\n\n```\n#!/bin/sh\n. "$(dirname "$0")/_/husky.sh"\n\nnpx lint-staged --allow-empty $1\n```\n\n**测试一下**\n\n同上执行`git commmit -m \'test\'`，终端显示`ESLint`报错信息，则配置成功\n\n### 3. 配置 commitlint\n\n主要是为了验证`commit msg`的 msg 是否符合规范\n\n**1）安装 commitlint 相关依赖包**\n\n```\nnpm install @commitlint/cli @commitlint/config-conventional --save-dev\n```\n\n**2）新建并配置 comminlint.config.js 文件**\n\n```\nmodule.exports = {\n  extends: [\'@commitlint/config-conventional\'], // 直接引入配置好的一个库，免得自己要一个一个定义\n}\n```\n\n**3）按如下步骤测试一下**\n\n1. 去掉 mian.ts 文件中的`console.log`\n2. 执行`git commmit -m \'test\'`，终端显示 msg 提交信息不规范，commit 操作中止，说明 comminlint 生效了\n3. 按 msg 规范再提交一次，执行`git commmit -m \'fix: 修复 main.ts 文件\'`，commit 提交成功\n\n## 五、VSCode 中集成 ESLint + Prettier + Stylelint\n\n### 1. 安装如下插件：\n\n- Vue Language Features (Volar) Vue3.0 语法支持\n- TypeScript Vue Plugin (Volar) 用于 TypeScript 服务器的 Vue 插件\n- Iconify IntelliSense Iconify 预览和搜索\n- ESLint 脚本代码检查\n- Prettier 代码格式化\n- Stylelint css 格式化\n- DotENV .env 文件高亮\n- EditorConfig for VS Code，这个插件可以让编译器读取配置文件，这个插件可以让编译器读取配置文件\n\n**PS:** 我们需要禁用掉 Vetur 插件，不然会导致 Volar 插件不生效\n\n### 2. 配置 setting.json\n\n1. 配置工作区 setttings.json 文件\n\n```\n{\n  // #每次保存的时候自动格式化\n  "editor.formatOnSave": false,\n  "editor.codeActionsOnSave": {\n    "source.fixAll.eslint": true,\n    "source.fixAll.stylelint": true\n  }\n}\n```\n\n2. 用户区 settings.json，在项目根目录创建.vscode/settings.json 文件。\n\n```\n{\n  "editor.formatOnSave": false,\n  "editor.codeActionsOnSave": {\n    "source.fixAll.eslint": true,\n    "source.fixAll.stylelint": true\n  },\n}\n```\n\n### 3. 配置 EditorConfig 文件\n\n在项目根目录创建.editorconfig 文件。创建完成之后，这个文件里面定义的代码规范规则会高于编译器默认的代码规范规则。\n\n```\n root = true\n [*]\n charset = utf-8\n indent_style = space\n indent_size = 2\n insert_final_newline = true\n trim_trailing_whitespace = true\n end_of_line = auto\n```\n\n## 六、踩坑记\n\n1. 执行`npm run lint` 时，控制台报 `Unknown word (CssSyntaxError)` 错误\n   因为最新的 stylelint stylelint-config-standard 对 vue3 模版文件支持不是很好，不能正确识别出.vue 文件的 css 代码。所以需要对以下三个文件做降级处理\n   ```\n   "stylelint": "^13.13.1",\n   "stylelint-config-standard": "^22.0.0",\n   "stylelint-scss": "^3.21.0",\n   ```\n2. VSCode 中 stylelint 格式化不生效的问题\n   同样也是要对 stylelint 做降级处理，选择 0.87.6 版本安装即可，具体操作如下\n\n## 七、参考\n\n- https://blog.csdn.net/weixin_45137565/article/details/120403170\n- https://juejin.cn/post/7022720509875847182\n- https://www.cnblogs.com/Yellow-ice/p/15127392.html\n- https://www.cnblogs.com/Yellow-ice/p/15349873.html\n- https://www.cnblogs.com/Yellow-ice/p/15349873.html\n- https://segmentfault.com/a/1190000040615432?utm_source=sf-similar-article\n- https://www.npmjs.com/package/husky\n- https://typicode.github.io/husky/#/\n- https://www.npmjs.com/package/lint-staged\n',
  )
  return {
    code: 200,
    data: {
      userName: "zhangbingqing",
      title: "搭建 Vite2+Vue3+TS项目并配置JS、CSS、GIT提交规范",
      publish: "2021-09-12 10:09:21",
      intro: "",
      content: con,
    },
    message: "请求成功",
  }
}
